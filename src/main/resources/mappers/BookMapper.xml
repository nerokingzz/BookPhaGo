<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="book">
	<!-- 관리자 도서목록 -->
 	<select id="adminlibrary_request_list"  resultType="hashmap">
 		SELECT *
 		from B_BOOK_LIB 
 		order by BookNumber asc
 	</select>
 	
 	<!-- 관리자 도서검색 -->
 	
 	<select id="adminsearchbook" parameterType="hashmap" resultType="hashmap">
 		select BookName,BookNumber,BookWriter,BookPublisher,BookDate,BookGenre,BookRent,BookReservation,isbn
 		from B_BOOK_LIB B
 		where ${search_option} LIKE '%'||#{search_value}||'%' order by B.BookNumber asc
 	</select>
 	
 	<!-- 관리자 도서등록 -->
 	<insert id="inputlibrary" parameterType="hashmap">
 		INSERT INTO B_BOOK_LIB VALUES (#{isbn}, #{bookName}, #{bookContents}, #{bookWriter}, #{bookTrans}, #{bookPublisher}, #{bookDate}, #{bookGenre}, #{bookNumber}, UTL_RAW.CAST_TO_RAW(#{bookThum}), #{bookRent}, #{bookReservation})
 	</insert>
 	
 	<!-- 관리자 도서수정목록 -->
 	<select id="modfindlibrary" parameterType="hashmap" resultType="hashmap">
 		SELECT * FROM B_BOOK_LIB where bookNumber = #{bookNumber}
 	</select>
 	
 	<!-- 도서 수정 -->
 	<update id="modifylibrary" parameterType="bookInfoVO">
 		update B_BOOK_LIB set bookRent=#{bookRent} where bookNumber=#{bookNumber}
 	</update>
 	
	<!-- 관리자 도서 삭제 -->
 	<delete id="librarydelete" parameterType="hashmap">
 		DELETE FROM B_BOOK_LIB WHERE bookNumber=#{bookNumber}
 	</delete>
 	
 	<!-- 사용자 도서 목록 -->
 	<select id="userlibrarylist" parameterType="hashmap" resultType="hashmap">
 		SELECT BookName,BookNumber,BookWriter,BookPublisher,BookDate,BookGenre,BookRent,BookReservation from B_BOOK_LIB order by BookNumber asc
 	</select>
 	
 	<!-- 사용자 도서 검색 -->
 	<select id="usersearchbook" parameterType="hashmap" resultType="hashmap">
 		select BookName,BookNumber,BookWriter,BookPublisher,BookDate,BookGenre,BookRent,BookReservation
 		from B_BOOK_LIB
 		where ${search_option} LIKE '%'||#{search_value}||'%' order by BookNumber asc
 	</select>
 
 	<!-- 사용자 예약 목록 -->
 	<select id="userreservationlist" parameterType="hashmap" resultType="hashmap">
 		select BookName,BookNumber from B_BOOK_LIB where bookNumber = #{bookNumber}
 	</select>
 	
 	<!-- 사용자 도서 신청 검색 -->
 	<select id="userapplysearch" parameterType="hashmap" resultType="hashmap">
 		select A.bookName, A.bookWriter, A.bookpublisher, A.bookdate, A.isbn
		from B_BOOK_OFFICIAL A left outer join B_BOOK_LIB B on A.isbn=B.isbn
		where B.isbn is null and bookName like '%'||#{search_value}||'%'	
 	</select>
 	
 	<!-- 사용자 도서 신청 userapplybook-->
 	<insert id="userapplybook" parameterType="hashmap">
 		<selectKey keyProperty="applynumber" resultType="integer"  order="BEFORE">
			SELECT APPLY_SEQ.nextval From DUAL
		</selectKey>
 		INSERT INTO B_BOOK_REQUEST VALUES (#{applynumber}, #{userid}, #{isbn}, #{applyDate}, #{applyReason}, #{applyState}, #{bookName})
 	</insert>
 	
 	<!-- 사용자 도서 예약 bookReservation 변경-->
 	<update id="userreservationupdate" parameterType="hashmap">
 		update B_BOOK_LIB set bookReservation = '예약불가' where bookNumber = #{bookNumber}
 	</update>
 	
 	<!-- 사용자 도서 예약 -->
 	<insert id="insertuserreservation" parameterType="hashmap">
		 <selectKey keyProperty="reservationNumber" resultType="integer"  order="BEFORE">
			SELECT NO_SEQ.nextval From DUAL
		</selectKey>


 		insert into B_BOOK_RESERVATION values (#{user_id}, #{reservationNumber}, #{bookNumber}, #{resesrvationDate})
 	</insert>
 	
 	<!-- 관리자 isbn 검색 -->
 	<select id="adminisbnsearch" parameterType="hashmap" resultType="hashmap">
 		select A.bookName, A.bookWriter, A.bookpublisher, A.bookdate, A.isbn
		from B_BOOK_OFFICIAL A left outer join B_BOOK_LIB B on A.isbn=B.isbn
		where B.isbn is null and A.${search_option} like '%'||#{search_value}||'%'
 	</select>
 	
 	<!-- 관리자 isbn 검색 페이지 -->
 	<select id="adminisbnsearchlist"  resultType="hashmap">
 		SELECT * from B_BOOK_OFFICIAL
 	</select>
 	
 	<!-- 도서번호 자동검색 -->
 	<select id="booknumbersearch" parameterType="String" resultType="String">
 		  SELECT BookNUmber FROM (SELECT * FROM b_book_lib WHERE bookgenre=#{bookGenre} ORDER BY booknumber DESC) WHERE ROWNUM = 1
 	</select>
 	
 	<!-- 도서 신청 도서중복검색 -->
 	<select id="applybookcheck" parameterType="String" resultType="String">
 		  SELECT * from B_BOOK_LIB where isbn=#{isbn}
 	</select>
 	
 	<!-- 사용자 도서 대출 가능 여부 -->
 	<select id="searchuserid" parameterType="String" resultType="String">
 		 	select borrowcnt from u_user_info where userid=#{userid}
 	</select>
 	
 	<!-- 사용자 도서 대출 도서 목록 -->
 	<select id="searchbnumber" parameterType="hashmap" resultType="hashmap">
 		 	select isbn,bookname, bookWriter, bookpublisher, bookdate, bookRent from b_book_lib where bookNumber = #{bookNumber}
 	</select>
 	
 	<!-- 사용자 도서 대출시 borrowcnt 증가 -->
 	<update id="userborrow" parameterType="String">
 		update u_user_info set borrowcnt = borrowcnt + 1 where userid = #{userid}
 	</update>
 	
 	<!-- 사용자 도서 대출 정보 insert -->
 	<insert id="insertbookrent" parameterType="hashmap">
 		<selectKey keyProperty="rentNumber" resultType="integer"  order="BEFORE">
			SELECT Rent_SEQ.nextval From DUAL
		</selectKey>
 		INSERT INTO B_BOOK_RENT VALUES (#{rentNumber}, #{bookNumber}, #{userid}, TO_CHAR(sysdate, 'YYYY-MM-DD'), TO_CHAR(sysdate + 7, 'YYYY-MM-DD') , #{bookState}, '', '0')
 	</insert>
 	
 	<!-- 도서 대출시 도서정보변경 -->
 	<update id="updatebooklib" parameterType="hashmap">
 		update b_book_lib set bookRent=#{bookState1}, bookReservation=#{bookState2} where bookNumber=#{bookNumber}
 	</update>
 	
 	<!-- 사용자 도서 반납 갯수 여부 -->
 	<select id="searchreturn" parameterType="String" resultType="String">
 		 	select borrowcnt from u_user_info where userid=#{userid}
 	</select>
 	
 	<!-- 사용자 도서 반납 도서 목록 -->
 	<select id="return_bookNumber" parameterType="hashmap" resultType="hashmap">
 	 select a.isbn,a.bookname, a.bookWriter, a.bookpublisher, a.bookdate, a.bookRent 
 		 	from b_book_lib A,b_book_rent B 
 		 	where a.bookNumber=b.booknumber and userid=#{userid} and b.state In('대출중','연체중') and b.bookNumber=#{bookNumber}	 	
 	</select>
 	
 	<!-- 사용자 도서 반납시 borrowcnt 감소 -->
 	<update id="userrent" parameterType="String">
 		update u_user_info set borrowcnt = borrowcnt - 1 where userid = #{userid}
 	</update>
 	
 	<!-- 도서 반닙시 B_BOOK_RENT변경 -->
 	<update id="updatebookrent" parameterType="hashmap">
 		update B_BOOK_RENT set RreturnDate=#{RreturnDate}, state=#{bookState} where rentNumber = (select max(rentNumber) from B_BOOK_RENT where userid = #{userid} and bookNumber=#{bookNumber})
 	</update>
 	
 	<!-- 도서 반닙시 B_BOOK_LIB변경 -->
 	<update id="updatebooklibreturn" parameterType="hashmap">
 		update B_BOOK_LIB set bookRent='대출가능', bookReservation='예약불가' where bookNumber=#{bookNumber}
 	</update>
 	
 	<!-- 사용자 대출현황 조회 -->
 	<select id="myLib_rentstatus" parameterType="String" resultType="hashmap">
 		select A.BOOKNAME, B.BOOKNUMBER, TO_CHAR(b.rentdate, 'YYYY-MM-DD') as rentdate, TO_CHAR(b.returndate,'YYYY-MM-DD') as returndate, b.state, b.rreturndate
		from B_BOOK_LIB A, B_BOOK_RENT B
		where A.BOOKNUMBER=B.BOOKNUMBER and B.userid=#{user_id}
 	</select>
 	
 	<!-- 사용자 도서연장 리스트 -->
 	<select id="bookextendlist" parameterType="String" resultType="hashmap">
 		select bookName,bookNumber
		from B_BOOK_LIB 
		where bookNumber=#{bookNumber}
 	</select>
 	
 	<!-- 도서 연장시 B_BOOK_RENT변경 -->
 	<update id="updateB_BOOK_RENT" parameterType="String">
 		update B_BOOK_RENT set returnDate = returnDate + 7 where bookNumber=#{bookNumber}
 	</update>
 	
 	<!-- 도서 신청 cnt계산 -->
 	<select id="applycnt" parameterType="String" resultType="String">
 		select count(userid) from b_book_request where userid=#{userid} and applydate like '%'||TO_CHAR(sysdate,'YYYY-MM')||'%'
 	</select>
 	
 	<!-- 사용자 신청현황 조회 -->
 	<select id="myLib_applystatus" parameterType="String" resultType="hashmap">
 		select * from B_BOOK_REQUEST where userid = #{user_id}
 	</select>
 	
 	<!-- 관리자 대출현황 조회 -->
 	<select id="admin_bookstatus" resultType="hashmap">
 		select A.RENTNUMBER, A.userid, B.bookname, A.booknumber, TO_CHAR(a.rentdate, 'YYYY-MM-DD') as rentdate, TO_CHAR(a.returndate,'YYYY-MM-DD') as returndate, a.rreturndate, a.state
		from B_BOOK_RENT A, B_BOOK_LIB B
		where a.booknumber=b.booknumber
		order by rentdate desc
 	</select>
 	
 	<!-- 관리자 대출현황 검색 -->
 	<select id="adminrentstatus" parameterType="hashmap" resultType="hashmap">
 		select A.BOOKNUMBER, A.userid, TO_CHAR(a.rentdate, 'YYYY-MM-DD') as rentdate,  TO_CHAR(a.returndate,'YYYY-MM-DD') as returndate, a.rreturndate, a.state, B.BOOKNAME
		from B_BOOK_RENT A left outer join B_BOOK_LIB B on A.BOOKNUMBER=B.BOOKNUMBER
		<if test='search_option == "bookName"'> where b.${search_option} like '%'||#{search_value}||'%' </if>
		<if test='search_option == "bookNumber"'> where a.${search_option} like '%'||#{search_value}||'%' </if>
		<if test='search_option == "userid"'> where a.${search_option} like '%'||#{search_value}||'%' </if>
		<if test='search_option == "state"'> where a.${search_option} like '%'||#{search_value}||'%' </if>
 	</select>
 	
 	<!-- 관리자 신청현황 조회 -->
 	<select id="admin_applystatus"  resultType="hashmap">
 		select * from B_BOOK_REQUEST
 	</select>
 	
 	<!-- 관리자 도서 신청 상태 변경 -->
 	<update id="updateapplyDB" parameterType="hashmap">
 		update b_book_request set applystate=#{selectVal} where applynumber = #{userid}
 	</update>
 	
 	<!-- 관리자 도서신청현황 검색 -->
 	<select id="adminapplystatus" parameterType="hashmap" resultType="hashmap">
 		select * from B_BOOK_REQUEST where ${search_option1} like '%'||#{search_value1}||'%'
 	</select>
 	
 	<!-- 관리자 도서목록 -->
 	<select id="admin_booklist"  resultType="hashmap">
 		SELECT BookName,BookNumber,BookWriter,BookPublisher,BookDate,BookGenre,BookRent,BookReservation,ISBN
 		from B_BOOK_LIB 
 		order by BookNumber asc
 	</select>
 	
 	<!-- 배치 -->
 	<update id="updatebookrentNumber" parameterType="int">
 		update B_BOOK_RENT set state='연체중' where rentNumber = #{number}
 	</update>
 	
 	<!-- 관리자 도서 신청 상태 변경 -->
 	<update id="update_applystate" parameterType="hashmap">
 		update b_book_request set applystate=#{applyState} where applynumber = #{applyNumber}
 	</update>
 	
 	<!-- 총 도서 갯수 -->
 	<select id="countbook" resultType="integer">
 		select count(*) from B_BOOK_LIB
 	</select>
 	
 	 	<!-- 페이징 처리 후 B_BOOK_LIB 조회 -->
 	<select id="userlibrarylistt" parameterType="hashmap" resultType="hashmap">
 		SELECT * 
		FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
						SELECT * 
						FROM B_BOOK_LIB 
						) A
				)
		WHERE RN BETWEEN #{start} AND #{end}
		
		
 	</select>
 	
 	<!-- 총 bookrent 갯수 -->
 	<select id="countrent" parameterType="String" resultType="integer">
 		select count(*) from B_BOOK_RENT where userid=#{user_id}
 	</select>
 	
 	<!-- 페이징처리후 사용자 대출현황 조회 -->
 	<select id="myLib_rentstatuss" parameterType="hashmap" resultType="hashmap">
 		select *
		from (
		    SELECT ROWNUM RN, A.* 
		    from (
		    
		select A.BOOKNAME, B.BOOKNUMBER, TO_CHAR(b.rentdate, 'YYYY-MM-DD') as rentdate, TO_CHAR(b.returndate,'YYYY-MM-DD') as returndate, b.state, b.rreturndate
				from B_BOOK_LIB A, B_BOOK_RENT B
				where A.BOOKNUMBER=B.BOOKNUMBER and B.userid=#{userid}
		        ) A
		    )
 	   WHERE RN BETWEEN #{start} AND #{end}
 	</select>
</mapper>